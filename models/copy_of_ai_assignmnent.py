# -*- coding: utf-8 -*-
"""Copy of AI_Assignmnent

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QjRC3yIdM1sbUaeQyhCL0bV6gkZcQDqc
"""

import numpy as np
import pandas as pd
import os

import pip
import seaborn as sns
from scipy import stats
import missingno as msno
# To plot pretty figures
# %matplotlib inline
import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib import style

sns.set(style='ticks', color_codes=True)
sns.set(style='darkgrid')
# import plotly.express as px
# Ignore useless warnings (see SciPy issue #5998)
import warnings

warnings.filterwarnings(action="ignore", message="^internal gelsd")
warnings.filterwarnings('always')
warnings.filterwarnings('ignore')
import types


# from botocore.client import Config
# import ibm_boto3

def __iter__(self): return 0


import pandas as pd

players = pd.read_csv("players_22 (1).csv")

"""Q1. Demonstrate the data preparation & feature extraction process"""

# Displaying the data, first 100 rows
players.head(1000)

# Checking if there are NaN in the data
players.isnull().sum()

# Dropping the columns with NaN values for easy Data processing and cleaning
players.dropna(axis="columns", how="any")

"""QN 2. Create  feature subsets which show maximum correlation with the dependent"""

# Checking the available coulums in the data
df_fifa = players
df_fifa.columns

# Creating the feature subsets to help in showing Maximum correlation with the dependent variables
df_fifa1 = df_fifa[['short_name', 'age', 'overall', 'potential', 'value_eur', 'wage_eur']]

# Checking the shape of the data
df_fifa1.shape

df_fifa1['value_eur'] = df_fifa1['value_eur'] / 1000000
df_fifa1['wage_eur'] = df_fifa1['wage_eur'] / 10000

df_fifa1.head()

# Showing the maximum correlation using the created features
df_fifa1.corr()

# Showing the details of the data
df_fifa1.describe()

df_fifa1.isnull()

df_fifa1.isnull().sum()

df_fifa1.dropna(axis="columns", how="any")

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import pandas as pd
import pylab as pl
import numpy as np
# %matplotlib inline
from sklearn import linear_model
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error

# Ploting the data (overall rating against age)
plt.bar('age', 'overall', data=df_fifa1, color='blue')
plt.xlabel("Age")
plt.ylabel("Overall")
plt.show()

line1 = linear_model.LinearRegression()
df_Potential = df_fifa.loc[:, "potential"].values.reshape(-1, 1)
df_Overall = df_fifa.loc[:, "overall"].values.reshape(-1, 1)
line1.fit(df_Potential, df_Overall)
pred1 = line1.predict(df_Potential)

plt.scatter('potential', 'overall', data=df_fifa, marker='x', color='blue')
plt.xlabel("Potential")
plt.ylabel("Overall")
plt.plot(df_Potential, pred1, color='black')
plt.show()

"""QN 3. Create and train a suitable machine learning model that can predict a player rating"""

import numpy as np

split = np.random.rand(len(df_fifa1)) < 0.875
train = df_fifa1[split]
test = df_fifa1[~split]

# Creating the Model
regr2 = linear_model.LinearRegression()

## Trainig & fitting the model
fifa_x_train = train[['age', 'overall', 'potential']]
fifa_y_train = train[['overall']]
poly = PolynomialFeatures(degree=4)
fifa_x_train_poly = poly.fit_transform(fifa_x_train)
regr2.fit(fifa_x_train_poly, fifa_y_train)

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import preprocessing, svm
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None)

# Testing the model that we created and trained
test2 = df_fifa1[~split]
fifa_x_test2 = test2[['age', 'overall', 'potential']]
fifa_y_test2 = test2[['overall']]
fifa_x_test_poly2 = poly.fit_transform(fifa_x_test2)

"""QN 4. Measure the performance of the model and fine tune it as a process of optimization"""

# Measuring the performance of our model
df_fifa_pred2 = regr2.predict(fifa_x_test_poly2)

r2_score(fifa_y_test2, df_fifa_pred2)

# Predicting the Rating after measuring the performanace of the model trained
fifa_x_test2['Predicted Ratings'] = df_fifa_pred2

df_fifa1 = pd.merge(df_fifa1, fifa_x_test2)
df_fifa1.head(20)

df_fifa_pred3 = regr2.predict(fifa_x_train_poly)

fifa_x_train['Predicted Ratings'] = df_fifa_pred3

df_fifa6 = pd.merge(df_fifa1, fifa_x_train)
df_fifa6.head(20)

df_fifa2 = df_fifa1.fillna(0)
df_fifa2

df_fifa7 = df_fifa2[['age', 'overall', 'potential']]
df_fifa8 = poly.fit_transform(df_fifa7)

df_fifa_pred4 = regr2.predict(df_fifa8)

df_fifa7['FIFA 22 Predicted Ratings'] = df_fifa_pred4

df_fifa7.head()

import pandas as pd

# Merging the different predictions performed on the data to come up with the final prediction
df_fifa9 = pd.merge(df_fifa1, df_fifa7)
df_fifa9.head(20)

## Predicting the top 10 rated FIFA 22 footballers
df_fifa9 = df_fifa9.sort_values('FIFA 22 Predicted Ratings', ascending=False).reset_index()
df_fifa9.drop("index", axis=1, inplace=True)
print(df_fifa9.head(10))


def predict10():
    str(df_fifa9.head(10))


import numpy as np


# create a new dataframe with features of the player you want to predict
def predict_rating(age, overall, potential):
    new_player = pd.DataFrame({
        'age': [age],
        'overall': [overall],
        'potential': [potential]
    })

    # transform the features using the same polynomial features object used during training
    new_player_poly = poly.fit_transform(new_player)

    # use the model to generate the predicted rating
    predicted_rating = regr2.predict(new_player_poly)

    return predicted_rating


# Checking how best can our model score in terms of predicting accuracy
r2_score(df_fifa9['overall'], df_fifa9['FIFA 22 Predicted Ratings'])

from scipy import stats

# Checking the coefficiene of the model
pearson_coef, p_value = stats.pearsonr(df_fifa9['overall'], df_fifa9['FIFA 22 Predicted Ratings'])
print("Pearson Correlation Coefficient: ", pearson_coef, "and a P-value of:", p_value)
